
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ##########################################
> ### Initialization
> ##########################################
> 
> # Import
> library(gplots)
Loading required package: gtools
Loading required package: gdata
gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.

gdata: read.xls support for 'XLSX' (Excel 2007+) files ENABLED.

Attaching package: ‘gdata’

The following object is masked from ‘package:stats’:

    nobs

The following object is masked from ‘package:utils’:

    object.size

Loading required package: caTools
Loading required package: grid
Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
Loading required package: MASS

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> library(RColorBrewer)
> 
> # Parameters
> pvalue1 = 0.001
> pvalue2 = 0.00001
> wid1 = 5
> hei1 = 10
> wid2 = 8
> hei2 = 10
> wid3 = 8
> hei3 = 10
> mx1 = 5
> my1 = 5
> mx2 = 10
> my2 = 5
> mx3 = 10
> my3 = 5
> cexRow1 = 0.4
> cexRow2 = 0.8
> cexRow3 = 0.8
> myDist = function(p1) dist(p1, method="euclidean")
> myHclust = function(p2) hclust(p2, method="ward")
> heatmapTitle = 'TF Enrichment in Footprints\n(-log10(X))'
> heatmapDiffTitle = 'TF Enrichment in Footprints\n(-log10(with)) - (-log10(without))'
> inLoc = '/home/egg/hpcwork/izkf/projects/huvec_inflammation/heatmap/Input/footprints/'
> outLoc = '/home/egg/hpcwork/izkf/projects/huvec_inflammation/heatmap/Results/footprints/'
> 
> # Reading Raw Data
> d=as.matrix(read.table(paste(inLoc,'rand_corr.txt',sep='')))
> colnames(d)=gsub('\\.', ' ', colnames(d))
> 
> # Log-transformation pseudocount calculation
> minV = min(d[d>0]) # Calculating the minimum value greater than 0.0 
> 
> ##########################################
> ### Heatmap Print Functions
> ##########################################
> 
> # Regular Heatmap
> createHeatmap <- function(data,title,colorScheme,wid,hei,mx,my,rCex,outputFile){
+   postscript(outputFile,width=wid,height=hei,horizontal=FALSE,paper='special')
+   par(cex.axis=1.0, cex.main=0.8)
+   heatmap.2(data, col=colorScheme, main=title, margins=c(my,mx), cexCol=0.8, cexRow=rCex, trace='none',
+             sepwidth=c(2,2), sepcolor='black', Rowv=TRUE, Colv=FALSE, density.info = 'none', lhei = c(1.2, 8),
+             distfun=myDist, hclustfun=myHclust, keysize = 2.5 )
+   dev.off()
+   system(paste('epstopdf',outputFile,sep=' '))
+ }
> 
> # Differential Heatmap
> createHeatmapDiff <- function(data,title,colorScheme,colorBreaks,wid,hei,mx,my,rCex,outputFile){
+   postscript(outputFile,width=wid,height=hei,horizontal=FALSE,paper='special')
+   par(cex.axis=1.0, cex.main=0.8)
+   heatmap.2(data, col=colorScheme, breaks=colorBreaks, main=title, margins=c(my,mx), cexCol=0.8, cexRow=rCex, trace='none', 
+             sepwidth=c(2,2), sepcolor='black', Rowv=TRUE, Colv=FALSE, density.info = 'none', lhei = c(1.2, 8),
+             distfun=myDist, hclustfun=myHclust )
+   dev.off()
+   system(paste('epstopdf',outputFile,sep=' '))
+ }
> 
> ##########################################
> ### Graphs with All Columns (All)
> ##########################################
> 
> # Filtering Data
> # Filter 1 = Keep only the lines in which there is at least one value < p-value1
> dFilt1_All = d[apply(d,1,function(x) sum(x < pvalue1))>0,]
> colnames(dFilt1_All) = colnames(d)
> # Filter 2.1 = Keep only the lines in which there is at least one value > p-value2
> dFilt2_All = dFilt1_All[apply(dFilt1_All,1,function(x) sum(x > pvalue2))>0,]
> colnames(dFilt2_All) = colnames(d)
> # Filter 2.2 = Only the entries removed by filter 2.1
> dFilt3_All = dFilt1_All[apply(dFilt1_All,1,function(x) sum(x > pvalue2))<=0,]
> colnames(dFilt3_All) = colnames(d)
> 
> # Applying p-value Fix
> # All values X are now -log10(X+pseudocount), where pseudocount is the minimum value > 0.
> dFilt1_All = apply(dFilt1_All, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt2_All = apply(dFilt2_All, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt3_All = apply(dFilt3_All, 1:2, function(x) -log10(x+minV)) # Converting values
> 
> # Parameters
> hmcol <- colorRampPalette(brewer.pal(9, 'Reds'))(1000)
> 
> # Creating Heatmaps
> #outputFileName = paste(outLoc,'all.eps',sep='')
> #createHeatmap(dFilt1_All,heatmapTitle,hmcol,wid1,hei1,mx1,my1,cexRow1,outputFileName)
> outputFileName = paste(outLoc,'all_CE.eps',sep='')
> createHeatmap(dFilt2_All,heatmapTitle,hmcol,wid2,hei2,mx2,my2,cexRow2,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, main = title, margins = c(my,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> outputFileName = paste(outLoc,'all_NCE.eps',sep='')
> createHeatmap(dFilt3_All,heatmapTitle,hmcol,wid3,hei3,mx3,my3,cexRow3,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, main = title, margins = c(my,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> 
> # Write matrix to tab-separated txt
> outputFileName = paste(outLoc,'all_CE.txt', sep='')
> write.table(dFilt2_All, file = outputFileName, sep='\t', append = FALSE)
> outputFileName = paste(outLoc,'all_NCE.txt', sep='')
> write.table(dFilt3_All, file = outputFileName, sep='\t', append = FALSE)
> 
> ##########################################
> ### Graphs with Cluster Columns (Cluster)
> ##########################################
> 
> # Selecting columns
> selectVecCluster = c(3,4,5,6,7,9,10,11,12,13)
> d_Cluster = d[,selectVecCluster]
> colnames(d_Cluster) = colnames(d)[selectVecCluster]
> 
> # Filtering Data
> # Filter 1 = Keep only the lines in which there is at least one value < p-value1
> dFilt1_Cluster = d_Cluster[apply(d_Cluster,1,function(x) sum(x < pvalue1))>0,]
> colnames(dFilt1_Cluster) = colnames(d_Cluster)
> # Filter 2.1 = Keep only the lines in which there is at least one value > p-value2
> dFilt2_Cluster = dFilt1_Cluster[apply(dFilt1_Cluster,1,function(x) sum(x > pvalue2))>0,]
> colnames(dFilt2_Cluster) = colnames(d_Cluster)
> # Filter 2.2 = Only the entries removed by filter 2.1
> dFilt3_Cluster = dFilt1_Cluster[apply(dFilt1_Cluster,1,function(x) sum(x > pvalue2))<=0,]
> colnames(dFilt3_Cluster) = colnames(d_Cluster)
> 
> # Applying p-value Fix
> # All values X are now -log10(X+pseudocount), where pseudocount is the minimum value > 0.
> dFilt1_Cluster = apply(dFilt1_Cluster, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt2_Cluster = apply(dFilt2_Cluster, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt3_Cluster = apply(dFilt3_Cluster, 1:2, function(x) -log10(x+minV)) # Converting values
> 
> # Parameters
> hmcol <- colorRampPalette(brewer.pal(9, 'Reds'))(1000)
> 
> # Creating Heatmaps
> #outputFileName = paste(outLoc,'clusters.eps',sep='')
> #createHeatmap(dFilt1_Cluster,heatmapTitle,hmcol,wid1,hei1,mx1,my1,cexRow1,outputFileName)
> outputFileName = paste(outLoc,'clusters_CE.eps',sep='')
> createHeatmap(dFilt2_Cluster,heatmapTitle,hmcol,wid2,hei2,mx2,my2,cexRow2,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, main = title, margins = c(my,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> outputFileName = paste(outLoc,'clusters_NCE.eps',sep='')
> createHeatmap(dFilt3_Cluster,heatmapTitle,hmcol,wid3,hei3,mx3,my3,cexRow3,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, main = title, margins = c(my,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> 
> # Write matrix to tab-separated txt
> outputFileName = paste(outLoc,'clusters_CE.txt',sep='')
> write.table(dFilt2_Cluster, file = outputFileName, sep='\t', append = FALSE)
> outputFileName = paste(outLoc,'clusters_NCE.txt',sep='')
> write.table(dFilt3_Cluster, file = outputFileName, sep='\t', append = FALSE)
> 
> ##########################################
> ### Differential Heatmaps (Diff)
> ##########################################
> 
> # Selecting Columns
> selectVecWith = c(3,4,5,6)
> d_With = d[,selectVecWith]
> colnames(d_With)=c('cluster1','cluster2','cluster3','cluster4')
> selectVecWO = c(9,10,11,12)
> d_WO = d[,selectVecWO]
> colnames(d_WO)=c('cluster1','cluster2','cluster3','cluster4')
> 
> # Verifying filter tresholds in the subset of clusters used
> # This previous threshold calculation needs to be done in order
> # for the resulting matrices to have the same factors (number of lines)
> # so the difference can be calculated.
> selectVecTemp = c(selectVecWith,selectVecWO)
> d_Temp = d[,selectVecTemp]
> tempFilt1 = apply(d_Temp,1,function(x) sum(x < pvalue1))>0
> d_Temp1 = d_Temp[tempFilt1,]
> tempFilt2 = apply(d_Temp1,1,function(x) sum(x > pvalue2))>0
> tempFilt3 = apply(d_Temp1,1,function(x) sum(x > pvalue2))<=0
> 
> # Filtering Data
> # Filter 1 = Keep only the lines in which there is at least one value < p-value1
> dFilt1_With = d_With[tempFilt1,]
> colnames(dFilt1_With) = colnames(d_With)
> dFilt1_WO = d_WO[tempFilt1,]
> colnames(dFilt1_WO) = colnames(d_WO)
> # Filter 2.1 = Keep only the lines in which there is at least one value > p-value2
> dFilt2_With = dFilt1_With[tempFilt2,]
> colnames(dFilt2_With) = colnames(d_With)
> dFilt2_WO = dFilt1_WO[tempFilt2,]
> colnames(dFilt2_WO) = colnames(d_WO)
> # Filter 2.2 = Only the entries removed by filter 2.1
> dFilt3_With = dFilt1_With[tempFilt3,]
> colnames(dFilt3_With) = colnames(d_With)
> dFilt3_WO = dFilt1_WO[tempFilt3,]
> colnames(dFilt3_WO) = colnames(d_WO)
> 
> # Applying p-value Fix
> # All values X are now -log10(X+pseudocount), where pseudocount is the minimum value > 0.
> dFilt1_With = apply(dFilt1_With, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt2_With = apply(dFilt2_With, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt3_With = apply(dFilt3_With, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt1_WO = apply(dFilt1_WO, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt2_WO = apply(dFilt2_WO, 1:2, function(x) -log10(x+minV)) # Converting values
> dFilt3_WO = apply(dFilt3_WO, 1:2, function(x) -log10(x+minV)) # Converting values
> 
> # Calulating differences
> dFilt1_Diff = dFilt1_With - dFilt1_WO
> dFilt2_Diff = dFilt2_With - dFilt2_WO
> dFilt3_Diff = dFilt3_With - dFilt3_WO
> 
> # Parameters
> hmbreaks = c(seq(-10,-2,length=4),seq(-2,2,length=4),seq(2,10,length=4))
> hmcol = brewer.pal(11,"RdBu")
> #hmbreaks = c(seq(-10,-2,length=300),seq(-2,2,length=300),seq(2,10,length=300))
> #hmcol = colorRampPalette(c('darkred', 'white', 'darkblue'))(n = 899)
> 
> # Creating Heatmaps
> #outputFileName = paste(outLoc,'diff.eps',sep='')
> #createHeatmapDiff(dFilt1_Diff,heatmapDiffTitle,hmcol,hmbreaks,wid1,hei1,mx1,my1,cexRow1,outputFileName)
> outputFileName = paste(outLoc,'diff_CE.eps',sep='')
> createHeatmapDiff(dFilt2_Diff,heatmapDiffTitle,hmcol,hmbreaks,wid2,hei2,mx2,my2,cexRow2,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, breaks = colorBreaks, main = title,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> outputFileName = paste(outLoc,'diff_NCE.eps',sep='')
> createHeatmapDiff(dFilt3_Diff,heatmapDiffTitle,hmcol,hmbreaks,wid3,hei3,mx3,my3,cexRow3,outputFileName)
Warning message:
In heatmap.2(data, col = colorScheme, breaks = colorBreaks, main = title,  :
  Discrepancy: Colv is FALSE, while dendrogram is `row'. Omitting column dendogram.
> 
> # Write matrix to tab-separated txt
> outputFileName = paste(outLoc,'diff_CE.txt',sep='')
> write.table(dFilt2_Diff, file = outputFileName, sep='\t', append = FALSE)
> outputFileName = paste(outLoc,'diff_NCE.txt',sep='')
> write.table(dFilt3_Diff, file = outputFileName, sep='\t', append = FALSE)
> 
> 
> 
> proc.time()
   user  system elapsed 
  2.000   0.200   2.621 
